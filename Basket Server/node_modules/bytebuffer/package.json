{
  "name": "bytebuffer",
  "version": "1.5.0",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "description": "ByteBuffer.js: A Java-like, Netty-inspired ByteBuffer implementation using typed arrays.",
  "main": "ByteBuffer.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/ByteBuffer.js.git"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/ByteBuffer.js/issues"
  },
  "keywords": [
    "net",
    "array",
    "buffer",
    "arraybuffer",
    "typed array",
    "bytebuffer",
    "json",
    "websocket",
    "webrtc"
  ],
  "dependencies": {
    "long": "latest"
  },
  "devDependencies": {
    "testjs": "latest",
    "preprocessor": "latest",
    "closurecompiler": "latest"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "node node_modules/testjs/bin/testjs tests/suite.js",
    "make": "npm run-script build && npm run-script compile && npm run-script noexpose && npm test && npm run-script jsdoc",
    "build": "preprocess src/ByteBuffer.js src/ > ByteBuffer.js",
    "compile": "ccjs ByteBuffer.js --create_source_map=ByteBuffer.min.map --compilation_level=ADVANCED_OPTIMIZATIONS --externs=externs/Long.js > ByteBuffer.min.js",
    "noexpose": "cat ByteBuffer.js | grep -v @expose > ByteBuffer.noexpose.js",
    "jsdoc": "jsdoc -c jsdoc.json"
  },
  "readme": "![ByteBuffer.js - A Java-like ByteBuffer](https://raw.github.com/dcodeIO/ByteBuffer.js/master/ByteBuffer.png)\r\n======================================\r\nProvides a Java-like, Netty-inspired ByteBuffer implementation using typed arrays. It also tries to abstract a bit of\r\nthe complexity away by providing convenience methods for those who just want to write stuff without caring about signed,\r\nunsigned and the actual bit sizes. It's also one of the components driving [ProtoBuf.js](https://github.com/dcodeIO/ProtoBuf.js).\r\n\r\nByteBuffer\r\n----------\r\n* Mimics [Java ByteBuffers](http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/ByteBuffer.html) as close as reasonable while using typed array terms\r\n* Full 64bit support via [Long.js](https://github.com/dcodeIO/Long.js) (optional)\r\n* Simple allocation (`new ByteBuffer(capacity[, littleEndian])` or `ByteBuffer.allocate(capacity[, littleEndian])`)\r\n* Wrapping of quite everything which is or includes an ArrayBuffer (`ByteBuffer.wrap(buffer[, littleEndian])`)\r\n* Cloning using the same (`ByteBuffer#clone()`) and copying using an independent backing buffer (`ByteBuffer#copy()`)\r\n* Slicing using the same (`ByteBuffer#slice(begin, end)`) and using an indepentent backing buffer (`ByteBuffer#sliceAndCompact(begin, end)`)\r\n* Manual offset (`ByteBuffer#offset` and `ByteBuffer#length`) and array manipulation (`ByteBuffer#array`)\r\n* Remaining readable bytes (`ByteBuffer#remaining()`) and backing buffer capacity getters (`ByteBuffer#capacity()`)\r\n* Explicit (`ByteBuffer#resize(capacity)`) and implicit resizing (`ByteBuffer#ensureCapacity(capacity)`)\r\n* Efficient implicit resizing by doubling the current capacity\r\n* Flipping (`ByteBuffer#flip()`), marking (`ByteBuffer#mark([offset])`) and resetting (`ByteBuffer#reset()`)\r\n* Compacting of the backing buffer (`ByteBuffer#compact()`)\r\n* Conversion to ArrayBuffer (`ByteBuffer#toArrayBuffer([forceCopy])`) (i.e. to send data over the wire, e.g. a WebSocket\r\n  with `binaryType=\"arraybuffer\"`)\r\n* Conversion to Buffer (`ByteBuffer#toBuffer()`) if running inside of node.js\r\n* Reversing (`ByteBuffer#reverse()`), appending (`ByteBuffer#append(src[, offset])`) and prepending\r\n  (`ByteBuffer#prepend(src[, offset])`) of other ByteBuffers with implicit capacity management\r\n* Explicit destruction (`ByteBuffer#destroy()`)\r\n* `ByteBuffer#writeUint/Int8/16/32/64(value[, offset])` and `ByteBuffer#readUint/Int8/16/32/64([offset])`\r\n* `ByteBuffer#writeVarint32/64(value[, offset])` and `ByteBuffer#readVarint32/64([offset])` to write a base 128\r\n  variable-length integer as used in [protobuf](https://developers.google.com/protocol-buffers/docs/encoding#varints)\r\n* `ByteBuffer#writeZigZagVarint32/64(value[, offset])` and `ByteBuffer#readZigZagVarint32/64([offset])` to write a\r\n  zig-zag encoded base 128 variable-length integer as used in protobuf for efficient encoding of signed values\r\n* `ByteBuffer#writeFloat32/64(value[, offset])` and `ByteBuffer#readFloat32/64([offset])`\r\n* `ByteBuffer#write/readByte`, `ByteBuffer#write/readShort`, `ByteBuffer#write/readInt`, `ByteBuffer#write/readLong`\r\n  (all signed), `ByteBuffer#write/readVarint` and `ByteBuffer#write/readZigZagVarint` (both 32bit signed),\r\n  `ByteBuffer#write/readFloat`, `ByteBuffer#write/readDouble` aliases for the above for convenience\r\n* `ByteBuffer#writeUTF8String(str[, offset])`, `ByteBuffer#readUTF8String(chars[, offset])` and \r\n  `ByteBuffer#readUTF8StringBytes(length[, offset])` using the included UTF8 en-/decoder (full 6 bytes,\r\n  [ref](http://en.wikipedia.org/wiki/UTF-8#Description))\r\n* `ByteBuffer.encode64(bb)`, `ByteBuffer.decode64(str)` and `ByteBuffer#toBase64()` using the included Base64\r\n  en/-decoder.\r\n* `ByteBuffer#writeLString(str[, offset]))` and `ByteBuffer#readLString([offset])` to write respectively read a\r\n  length-prepended (number of characters as UTF8 char) string\r\n* `ByteBuffer#writeVString(str[, offset]))` and `ByteBuffer#readVString([offset])` to write respectively read a\r\n  length-prepended (number of bytes as base 128 variable-length 32bit integer) string\r\n* `ByteBuffer#writeCString(str[, offset])` and `ByteBuffer#readCString([offset])` to write respectively read a\r\n  NULL-terminated (Uint8 0x00) string\r\n* `ByteBuffer#writeJSON(data[, offset[, stringify]])` and `ByteBuffer#readJSON([offset[, parse]])` to write respectively\r\n  read arbitraty object data. Allows overriding the default stringify (default: JSON.stringify) and parse (default: \r\n  JSON.parse) implementations.\r\n* All with implicit offset advance if the offset parameter is omitted or without, if specified\r\n* Chaining of all operations that allow this (i.e. do not return some specific value like in read operations), e.g.\r\n\r\n  ```javascript\r\n  var bb = new ByteBuffer();\r\n  ...\r\n  bb.reset().writeInt(1).writeLString(\"Hello world!\").flip().compact()...\r\n  ```\r\n  \r\n* Switching between little endian and big endian byte order through `ByteBuffer#LE()` and `ByteBuffer#BE()`, e.g.\r\n  \r\n  ```javascript\r\n  var bb = new ByteBuffer(8).LE().writeInt(1).BE().writeInt(2).flip(); // toHex: <01 00 00 00 00 00 00 02>\r\n  ```\r\n  \r\n* `ByteBuffer#toString([enc])`, `ByteBuffer#toHex([wrap])`, `ByteBuffer#toASCII([wrap])`, `ByteBuffer#toUTF8()`,\r\n  `ByteBuffer#toBase64()` and `ByteBuffer#printDebug()` (emits hex + ASCII + offsets to console, looks like your\r\n  favourite hex editor) for pain-free debugging\r\n  \r\nFeatures\r\n--------\r\n* [CommonJS](http://www.commonjs.org/) compatible\r\n* [RequireJS](http://requirejs.org/)/AMD compatible\r\n* [node.js](http://nodejs.org) compatible, also available via [npm](https://npmjs.org/package/bytebuffer)\r\n* Browser compatible\r\n* [Closure Compiler](https://developers.google.com/closure/compiler/) ADVANCED_OPTIMIZATIONS compatible (fully annotated,\r\n  `ByteBuffer.min.js` has been compiled this way, `ByteBuffer.min.map` is the source map)\r\n* Fully documented using [jsdoc3](https://github.com/jsdoc3/jsdoc)\r\n* Well tested through [nodeunit](https://github.com/caolan/nodeunit)\r\n* Zero production dependencies (Long.js is optional)\r\n* Small footprint\r\n\r\nUsage\r\n-----\r\n### Node.js / CommonJS ###\r\n* Install: `npm install bytebuffer`\r\n\r\n```javascript\r\nvar ByteBuffer = require(\"bytebuffer\");\r\nvar bb = new ByteBuffer();\r\nbb.writeLString(\"Hello world!\");\r\nbb.flip();\r\nconsole.log(bb.readLString()+\" from ByteBuffer.js\");\r\n```\r\n\r\n### Browser ###\r\n\r\nOptionally depends on [Long.js](https://github.com/dcodeIO/Long.js) for long (int64) support. If you do not require long\r\nsupport, you can skip the Long.js include.\r\n\r\n```html\r\n<script src=\"//raw.github.com/dcodeIO/Long.js/master/Long.min.js\"></script>\r\n<script src=\"//raw.github.com/dcodeIO/ByteBuffer.js/master/ByteBuffer.min.js\"></script>\r\n```\r\n\r\n```javascript\r\nvar ByteBuffer = dcodeIO.ByteBuffer;\r\nvar bb = new ByteBuffer();\r\nbb.writeLString(\"Hello world!\");\r\nbb.flip();\r\nalert(bb.readLString()+\" from ByteBuffer.js\");\r\n```\r\n\r\n### Require.js / AMD ###\r\n\r\nOptionally depends on [Long.js](https://github.com/dcodeIO/Long.js) for long (int64) support. If you do not require long\r\nsupport, you can skip the Long.js config. [Require.js](http://requirejs.org/) example:\r\n\r\n```javascript\r\nrequire.config({\r\n    \"paths\": {\r\n        \"Long\": \"/path/to/Long.js\"\r\n        \"ByteBuffer\": \"/path/to/ByteBuffer.js\"\r\n    }\r\n});\r\nrequire([\"ByteBuffer\"], function(ByteBuffer) {\r\n    var bb = new ByteBuffer();\r\n    bb.writeLString(\"Hello world!\");\r\n    bb.flip();\r\n    alert(bb.readLString()+\" from ByteBuffer.js\");\r\n});\r\n```\r\n\r\nOn long (int64) support\r\n-----------------------\r\nAs of the [ECMAScript specification](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5), number types have a maximum value\r\nof 2^53. Beyond that, behaviour might be unexpected. However, real long support requires the full 64 bits\r\nwith the possibility to perform bitwise operations on the value for varint en-/decoding. So, to enable true long support\r\nin ByteBuffer.js, it optionally depends on [Long.js](https://github.com/dcodeIO/Long.js), which actually utilizes two\r\n32 bit numbers internally. If you do not require long support at all, you can skip it and save the additional bandwidth.\r\nOn node, long support is available by default through the [long](https://npmjs.org/package/long) dependency.\r\n\r\nDownloads\r\n---------\r\n* [ZIP-Archive](https://github.com/dcodeIO/ByteBuffer.js/archive/master.zip)\r\n* [Tarball](https://github.com/dcodeIO/ByteBuffer.js/tarball/master)\r\n\r\nDocumentation\r\n-------------\r\n* [View documentation](http://htmlpreview.github.com/?http://github.com/dcodeIO/ByteBuffer.js/master/docs/ByteBuffer.html)\r\n\r\nTests (& Examples) [![Build Status](https://travis-ci.org/dcodeIO/ByteBuffer.js.png?branch=master)](https://travis-ci.org/dcodeIO/ByteBuffer.js)\r\n------------------\r\n* [View source](https://github.com/dcodeIO/ByteBuffer.js/blob/master/tests/suite.js)\r\n* [View report](https://travis-ci.org/dcodeIO/ByteBuffer.js)\r\n\r\nPrerequisites to run it against IE<10, FF<15, Chrome<9 etc.\r\n-----------------------------------------------------------\r\n* Working ArrayBuffer & DataView implementations (i.e. use a [polyfill](https://github.com/inexorabletash/polyfill#typed-arrays-polyfill))\r\n\r\nUsage with Closure Compiler's advanced optimizations\r\n----------------------------------------------------\r\nYou basically have the following three options:\r\n\r\n#### ByteBuffer.js as external dependency ####\r\nIf you compile your code but want to use ByteBuffer.js as an external dependency that's not actually compiled \"into\"\r\nyour project, add the provided [externs file](https://github.com/dcodeIO/ByteBuffer.js/blob/master/externs/ByteBuffer.js)\r\nto your compilation step (which usually excludes compilation of ByteBuffer.js).\r\n  \r\n#### ByteBuffer.js compiled into your project and exposed ####\r\nUse [ByteBuffer.js](https://github.com/dcodeIO/ByteBuffer.js/blob/master/ByteBuffer.js) if you want the ByteBuffer class\r\nto be exposed to the outside world (of JavaScript) so it can be called by external scripts. This also removes the\r\nrequirement of using externs but the compiler will also keep possibly unused code.\r\n\r\n#### ByteBuffer.js fully compiled into your project ####\r\nUse [ByteBuffer.noexpose.js](https://github.com/dcodeIO/ByteBuffer.js/blob/master/ByteBuffer.noexpose.js) if you want\r\nthe ByteBuffer class to be fully integrated into your (single file) project. Of course no external scripts will be able\r\nto call it or its method (trivially) because quite everything will become renamed, some parts inlined and moved around.\r\nThis will also allow the compiler to actually remove unused code.\r\n\r\nContributors\r\n------------\r\n[Dretch](https://github.com/Dretch) (IE8 comp.)\r\n\r\nLicense\r\n-------\r\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html",
  "readmeFilename": "README.md",
  "_id": "bytebuffer@1.5.0",
  "_from": "bytebuffer@"
}
